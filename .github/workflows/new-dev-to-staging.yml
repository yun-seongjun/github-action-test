name: Dev -> Staging

on:
  workflow_dispatch:
    inputs:
      bump_level:
        description: "Which semver part to bump before creating RC?"
        type: choice
        required: true
        default: patch
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

env:
  APPS: "neubie-go neubie-order neubie-order-admin"

jobs:
  create-staging:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (dev)
        uses: actions/checkout@v4
        with:
          ref: dev
          fetch-depth: 0
          fetch-tags: true

      - name: Configure Git
        run: |
          git config user.name  "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Prepare staging branch
        shell: bash
        run: |
          set -euo pipefail

          git fetch origin dev --tags
          git checkout dev
          git reset --hard origin/dev

          git branch -D staging 2>/dev/null || true

          if git ls-remote --exit-code --heads origin staging >/dev/null 2>&1; then
            echo "Deleting remote staging branch"
            git push origin :staging
          fi

          git checkout -b staging

      - name: Pick affected apps vs origin/main
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main --tags || true
          CHANGED=$(git diff --name-only origin/main..HEAD || true)
          APPS=$(echo "$CHANGED" | awk -F/ '/^apps\//{print $2}' | sort -u | xargs)
          WANT="${APPS:-}"
          FILTERED=""
          for a in ${{ env.APPS }}; do
            if echo " $WANT " | grep -q " $a "; then FILTERED="$FILTERED $a"; fi
          done
          echo "apps=$(echo "$FILTERED" | xargs)" >> "$GITHUB_OUTPUT"

      - name: Compute next RC and bump (affected apps only)
        if: ${{ steps.diff.outputs.apps != '' }}
        id: bump
        shell: bash
        env:
          BUMP_LEVEL: ${{ inputs.bump_level }}
        run: |
          set -euo pipefail

          if ! command -v node >/dev/null 2>&1; then
            echo "Node.js not found on runner"; exit 1
          fi

          echo "Bump level: ${BUMP_LEVEL}"
          echo "Affected apps: ${{ steps.diff.outputs.apps }}"

          bump_semver () {
            # $1: base version (e.g., 1.2.3), $2: level (major|minor|patch)
            local VER="$1"
            local LVL="$2"
            local MAJ MIN PAT
            IFS='.' read -r MAJ MIN PAT <<< "$VER"

            MAJ=${MAJ:-0}; MIN=${MIN:-0}; PAT=${PAT:-0}
            case "$LVL" in
              major) MAJ=$((MAJ+1)); MIN=0; PAT=0 ;;
              minor) MIN=$((MIN+1)); PAT=0 ;;
              patch|*) PAT=$((PAT+1)) ;;
            esac
            echo "${MAJ}.${MIN}.${PAT}"
          }

          TAGS=()
          for APP in ${{ steps.diff.outputs.apps }}; do
            PKG="apps/$APP/package.json"
            if [ ! -f "$PKG" ]; then
              echo "Skip: $PKG not found"
              continue
            fi

            CUR=$(node -p "require('./$PKG').version" | sed 's/-rc\.[0-9]\+$//')
            BASE=$(echo "$CUR")

            NEWBASE=$(bump_semver "$BASE" "$BUMP_LEVEL")

            LAST=$(git tag --list "$APP@${NEWBASE}-rc.*" | sort -V | tail -n1)
            if [ -z "$LAST" ]; then
              NEXT=1
            else
              NEXT=$(( $(echo "$LAST" | sed -E 's/.*-rc\.([0-9]+)/\1/') + 1 ))
            fi
            NEW="${NEWBASE}-rc.${NEXT}"

            node -e "
              const fs = require('fs');
              const p = '$PKG';
              const pkg = JSON.parse(fs.readFileSync(p, 'utf8'));
              pkg.version = '$NEW';
              fs.writeFileSync(p, JSON.stringify(pkg, null, 2) + '\n');
            "

            git add "$PKG"
            git commit -m "ðŸš€ [$APP] ${BASE} â†’ ${NEW}"

            echo "Bumped $APP: ${BASE} -> ${NEW}"
            TAGS+=("$APP@$NEW")
          done

          if [ ${#TAGS[@]} -eq 0 ]; then
            echo "nothing=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Tagging: ${TAGS[*]}"
          for T in "${TAGS[@]}"; do
            git tag "$T" || true
          done

          echo "nothing=false" >> "$GITHUB_OUTPUT"

      - name: Push staging branch
        run: |
          git push -u origin HEAD:staging

      - name: Push tags
        if: steps.bump.outputs.nothing == 'false'
        run: |
          git push origin --tags
