name: Version Baseline

on:
  workflow_dispatch:
    inputs:
      target-version:
        description: "Target version (e.g., 1.51.0)"
        required: true
        default: "1.51.0"
      app:
        description: "Select ONE app to baseline"
        type: choice
        required: true
        options:
          - NEUBIE_GO
          - NEUBIE_ORDER
          - NEUBIE_ORDER_ADMIN

permissions:
  contents: write
  pull-requests: write

jobs:
  baseline:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout & setup
      - uses: actions/checkout@v4
        with:
          ref: dev
      - uses: actions/setup-node@v4
        with:
          node-version: 22.17.1
      - run: |
          git config user.name  "GitHub Actions"
          git config user.email "github-actions@github.com"

      # 2. Bump version
      - id: bump
        run: |
          case "${{ github.event.inputs.app }}" in
            NEUBIE_GO)         SLUG=neubie-go;         DIR=apps/neubie-go ;;
            NEUBIE_ORDER)      SLUG=neubie-order;      DIR=apps/neubie-order ;;
            NEUBIE_ORDER_ADMIN)SLUG=neubie-order-admin;DIR=apps/neubie-order-admin ;;
          esac

          PKG="$DIR/package.json"
          TARGET="${{ github.event.inputs.target-version }}"
          CUR=$(node -p "require('./'+process.argv[1]).version" "$PKG")

          echo "slug=$SLUG"    >> $GITHUB_OUTPUT
          echo "prev=$CUR"     >> $GITHUB_OUTPUT
          echo "next=$TARGET"  >> $GITHUB_OUTPUT

          if [ "$CUR" = "$TARGET" ]; then
            echo "nothing=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          node -e "let fs=require('fs'),p='$PKG',pkg=require(p);pkg.version='$TARGET';fs.writeFileSync(p,JSON.stringify(pkg,null,2)+'\n')"
          git add "$PKG"
          git commit -m "ðŸš€ [$SLUG] $CUR â†’ $TARGET"
          echo "nothing=false" >> $GITHUB_OUTPUT

      # 3. Branch + Push + PR
      - if: steps.bump.outputs.nothing == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          CUR_SAFE=$(echo "${{ steps.bump.outputs.prev }}" | tr '.' '_')
          NEXT_SAFE=$(echo "${{ steps.bump.outputs.next }}" | tr '.' '_')
          SLUG="${{ steps.bump.outputs.slug }}"
          BR="version/${SLUG}-${NEXT_SAFE}-${CUR_SAFE}"

          git checkout -b "$BR"
          git push -u origin "$BR"

          TITLE="ðŸš€ [$SLUG] ${{ steps.bump.outputs.prev }} â†’ ${{ steps.bump.outputs.next }}"
          gh pr create \
            --title "$TITLE" \
            --body  "$TITLE" \
            --base dev \
            --head "$BR" \
            --assignee "${{ github.actor }}"

      - if: steps.bump.outputs.nothing == 'true'
        run: echo "Nothing to baseline for ${{ steps.bump.outputs.slug }}. No PR created."
