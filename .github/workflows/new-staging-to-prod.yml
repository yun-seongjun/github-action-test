name: Staging -> Main, Dev

on:
  workflow_dispatch: {}

permissions:
  pull-requests: write
  contents: write

env:
  # 전체 앱 목록을 필요에 맞게 관리하세요.
  APPS: "neubie-go neubie-order neubie-order-admin"

jobs:
  # staging 브랜치를 main에 머지하는 PR 생성
  create-PR-staging-to-main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0

      - name: Setup Node (for reading package.json)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check Differences Between Staging and Main
        run: |
          set -euo pipefail
          git fetch origin main staging
          if git diff --quiet origin/main origin/staging; then
            echo "No changes detected between staging and main. Skipping PR creation."
            echo "should_skip_main=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Proceeding with PR creation."
            echo "should_skip_main=false" >> $GITHUB_ENV
          fi

      - name: Build versions string (ALL apps)
        id: ver
        if: env.should_skip_main == 'false'
        run: |
          set -euo pipefail
          APP_LIST="${{ env.APPS }}"
          RAW=""
          PRETTY=""
          SEP=""
          for APP in $APP_LIST; do
            PKG="apps/$APP/package.json"
            if [ -f "$PKG" ]; then
              V=$(node -p "require('./$PKG').version")
              RAW="${RAW}${SEP}${APP}@${V}"
              PRETTY="${PRETTY}${SEP}\`${APP}@${V}\`"
              SEP=", "
            else
              echo "skip: $PKG not found" >&2
            fi
          done
          echo "versions=$RAW"   >> "$GITHUB_OUTPUT"
          echo "pretty=$PRETTY"  >> "$GITHUB_OUTPUT"

      - name: Create Pull Request
        if: env.should_skip_main == 'false'
        run: |
          LINE="Release: ${{ steps.ver.outputs.pretty }}"
          gh pr create \
            --repo "${{ github.repository }}" \
            --title "$LINE" \
