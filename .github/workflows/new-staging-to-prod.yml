name: Staging -> Main, Dev --new

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

env:
  APPS: "neubie-go neubie-order neubie-order-admin"

jobs:
  staging-to-main-and-dev:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          fetch-tags: true
          token: ${{ github.token }}

      - name: Setup Node.js (22.17.1)
        uses: actions/setup-node@v4
        with:
          node-version: 22.17.1

      - name: Prepare head branch (strip RC if needed, with guards)
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          HEAD_REF="staging"
          CHANGED=false
          CHANGED_APPS=()

          echo "::group::Version scan (before)"
          for APP in ${{ env.APPS }}; do
            PKG="apps/$APP/package.json"
            if [ ! -f "$PKG" ]; then
              echo "skip: $PKG not found" >&2
              continue
            fi
            CUR=$(node -p "try{JSON.parse(require('fs').readFileSync('${PKG}','utf8')).version||''}catch(e){''}")
            echo "before: $APP -> '$CUR'"
          done
          echo "::endgroup::"

          for APP in ${{ env.APPS }}; do
            PKG="apps/$APP/package.json"
            [ -f "$PKG" ] || continue

            CUR=$(node -p "try{JSON.parse(require('fs').readFileSync('${PKG}','utf8')).version||''}catch(e){''}")
            BASE=$(printf "%s" "$CUR" | sed -nE 's/^([0-9]+)\.([0-9]+)\.([0-9]+).*/\1.\2.\3/p')
            RC_SUFFIX=$(printf "%s" "$CUR" | sed -nE 's/^[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)$/\1/p')

            if [ -n "${RC_SUFFIX:-}" ] && [ "${BASE:-}" != "0.0.0" ] && [ -n "${BASE:-}" ]; then
              NEW="$BASE"
            else
              NEW="$CUR"
            fi

            if [ "$NEW" = "0.0.0" ] && [ "$CUR" != "0.0.0" ]; then
              echo "WARN: $APP would downgrade '$CUR' -> '$NEW' (blocked)"
              continue
            fi

            if [ "$CUR" != "$NEW" ] && [ -n "$NEW" ]; then
              node -e "
                const fs=require('fs'); const p='${PKG}';
                const pkg=JSON.parse(fs.readFileSync(p,'utf8'));
                pkg.version='${NEW}';
                fs.writeFileSync(p, JSON.stringify(pkg, null, 2)+'\n');
              "
              echo "write: $APP $CUR -> $NEW"
              CHANGED=true
              CHANGED_APPS+=("$APP")
            else
              echo "keep:  $APP $CUR"
            fi
          done

          if [ -n "$(git status --porcelain apps/*/package.json 2>/dev/null)" ]; then
            git switch -c release/rc-to-stable || git switch release/rc-to-stable
            git config user.name  "GitHub Actions"
            git config user.email "github-actions@github.com"
            git add apps/*/package.json
            git commit -m "release: RC to stable"
            git push --force-with-lease origin HEAD:release/rc-to-stable
            HEAD_REF="release/rc-to-stable"
            CHANGED=true
          fi

          echo "::group::Version scan (after)"
          for APP in ${{ env.APPS }}; do
            PKG="apps/$APP/package.json"
            [ -f "$PKG" ] || continue
            NOW=$(node -p "try{JSON.parse(require('fs').readFileSync('${PKG}','utf8')).version||''}catch(e){''}")
            echo "after:  $APP -> '$NOW'"
          done
          echo "::endgroup::"

          echo "head=$HEAD_REF"        >> "$GITHUB_OUTPUT"
          echo "rc_stripped=$CHANGED"  >> "$GITHUB_OUTPUT"
          echo "changed_apps=$(printf '%s\n' "${CHANGED_APPS[@]}" | xargs)" >> "$GITHUB_OUTPUT"

      - name: Build versions line (CHANGED apps only)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          APPS_TO_LIST="${{ steps.prep.outputs.changed_apps }}"
          PRETTY=""
          SEP=""
          if [ -n "$APPS_TO_LIST" ]; then
            for APP in $APPS_TO_LIST; do
              PKG="apps/$APP/package.json"
              [ -f "$PKG" ] || continue
              V=$(node -p "try{JSON.parse(require('fs').readFileSync('${PKG}','utf8')).version||''}catch(e){''}")
              [ -n "$V" ] || continue
              PRETTY="${PRETTY}${SEP}\`${APP}@${V}\`"
              SEP=", "
            done
          fi
          [ -n "$PRETTY" ] || PRETTY="(no app versions found)"
          echo "pretty=$PRETTY" >> "$GITHUB_OUTPUT"

      - name: Delete RC tags for changed apps
        if: steps.prep.outputs.rc_stripped == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force --prune origin

          CHANGED_APPS="${{ steps.prep.outputs.changed_apps }}"
          [ -n "$CHANGED_APPS" ] || exit 0

          for APP in $CHANGED_APPS; do
            PKG="apps/$APP/package.json"
            [ -f "$PKG" ] || continue
            BASE=$(node -p "try{JSON.parse(require('fs').readFileSync('${PKG}','utf8')).version||''}catch(e){''}")

            # ÏïàÏ†ï Î≤ÑÏ†ÑÎßå Ï≤òÎ¶¨
            if printf "%s" "$BASE" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              for PAT in "$APP@${BASE}-rc.*" "$APP@v${BASE}-rc.*"; do
                MATCHES="$(git tag --list "$PAT" || true)"
                [ -n "$MATCHES" ] || continue

                # here-stringÏúºÎ°ú ÏïàÏ†ÑÌïòÍ≤å ÎùºÏù∏ Îã®ÏúÑ Ï≤òÎ¶¨
                while IFS= read -r T; do
                  [ -n "$T" ] || continue
                  git tag -d "$T" || true
                  git push origin ":refs/tags/$T" || true
                done <<< "$MATCHES"
              done
            fi
          done

      - name: Open/ensure PR to main
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          HEAD="${{ steps.prep.outputs.head }}"
          git fetch origin main "$HEAD"
          if git diff --quiet origin/main origin/"$HEAD"; then
            echo "No diff between $HEAD and main; skipping PR."
            exit 0
          fi
          if gh pr list --base main --head "$HEAD" --json number -q '.[0].number' | grep -q '^[0-9]\+$'; then
            echo "PR already exists for head=$HEAD -> main; skipping create."
            exit 0
          fi

          printf -v LINE 'üöÄ Release: %s' '${{ steps.ver.outputs.pretty }}'
          gh pr create \
            --repo "${{ github.repository }}" \
            --base main \
            --head "$HEAD" \
            --title "$LINE" \
            --body  "$LINE"

      - name: Open/ensure PR to dev
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          HEAD="${{ steps.prep.outputs.head }}"
          git fetch origin dev "$HEAD"
          if git diff --quiet origin/dev origin/"$HEAD"; then
            echo "No diff between $HEAD and dev; skipping PR."
            exit 0
          fi
          if gh pr list --base dev --head "$HEAD" --json number -q '.[0].number' | grep -q '^[0-9]\+$'; then
            echo "PR already exists for head=$HEAD -> dev; skipping create."
            exit 0
          fi

          printf -v LINE 'üîÄ Staging -> Dev: %s' '${{ steps.ver.outputs.pretty }}'
          gh pr create \
            --repo "${{ github.repository }}" \
            --base dev \
            --head "$HEAD" \
            --title "$LINE" \
            --body  "$LINE"
