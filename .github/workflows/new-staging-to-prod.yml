name: Staging -> Main, Dev (release) --new

on:
  workflow_dispatch: {}

permissions:
  pull-requests: write
  contents: write

concurrency:
  group: release-staging-${{ github.ref }}
  cancel-in-progress: false

env:
  APPS: "neubie-go neubie-order neubie-order-admin"

jobs:
  release-on-staging:
    name: Strip RC on staging and tag
    runs-on: ubuntu-latest
    outputs:
      nothing: ${{ steps.release.outputs.nothing }}

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config user.name  "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Read sprint from package.json version
        id: sprint
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            SPRINT=$(node -p "require('./package.json').version")
          else
            echo "package.json not found at repo root; using 'unknown'"
            SPRINT="unknown"
          fi
          echo "SPRINT=$SPRINT" >> "$GITHUB_ENV"
          echo "sprint=$SPRINT"  >> "$GITHUB_OUTPUT"

      - name: Detect affected apps vs origin/main
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin main --tags || true
          CHANGED=$(git diff --name-only origin/main...HEAD || true)
          APPS=$(echo "$CHANGED" | awk -F/ '/^apps\//{print $2}' | sort -u | xargs)
          WANT="${APPS:-}"
          FILTERED=""
          for a in ${{ env.APPS }}; do
            if echo " $WANT " | grep -q " $a "; then FILTERED="$FILTERED $a"; fi
          done
          echo "apps=$(echo "$FILTERED" | xargs)" >> "$GITHUB_OUTPUT"

      - name: Strip RC & tag (only affected apps)
        if: ${{ steps.diff.outputs.apps != '' }}
        id: release
        shell: bash
        run: |
          set -euo pipefail

          command -v node >/dev/null 2>&1 || { echo "Node.js not found on runner"; exit 1; }

          echo "Affected apps: ${{ steps.diff.outputs.apps }}"

          REL_APPS=()
          TAGS=()

          for APP in ${{ steps.diff.outputs.apps }}; do
            PKG="apps/$APP/package.json"
            if [ ! -f "$PKG" ]; then
              echo "Skip: $PKG not found"
              continue
            fi
            CUR=$(node -p "require('./$PKG').version")
            STABLE=$(echo "$CUR" | sed 's/-rc\.[0-9]\+$//')
            if [ "$CUR" = "$STABLE" ]; then
              echo "Already stable: $APP@$CUR"
              continue
            fi
            node -e "
              const fs = require('fs');
              const p = '$PKG';
              const pkg = JSON.parse(fs.readFileSync(p, 'utf8'));
              pkg.version = '$STABLE';
              fs.writeFileSync(p, JSON.stringify(pkg, null, 2) + '\n');
            "
            echo "Release $APP: $CUR -> $STABLE"
            REL_APPS+=("$APP")
            TAGS+=("$APP@$STABLE")
          done

          if [ -z "$(git status --porcelain apps/*/package.json 2>/dev/null)" ]; then
            echo "No package.json changes; skip tagging/push."
            echo "nothing=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git add apps/*/package.json
          git commit -m "chore(release): $(IFS=,; echo "${REL_APPS[*]}") -> stable [version ${{ env.SPRINT }}]"

          echo "Tagging: ${TAGS[*]}"
          for T in "${TAGS[@]}"; do
            if git rev-parse -q --verify "refs/tags/$T" >/dev/null; then
              echo "Tag exists, skip: $T"
            else
              git tag "$T"
            fi
          done

          # 명시적으로 nothing=false 설정
          echo "nothing=false" >> "$GITHUB_OUTPUT"

      - name: Push to staging & tags
        if: steps.release.outputs.nothing != 'true'
        run: |
          git push origin HEAD:staging
          git push origin --tags

      - name: Mark no-op (when nothing to release)
        if: steps.release.outputs.nothing == 'true'
        run: echo "Nothing to release."

  create-PR-staging-to-main:
    needs: release-on-staging
    if: needs.release-on-staging.outputs.nothing != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read sprint from package.json version
        shell: bash
        run: |
          if [ -f package.json ]; then
            echo "SPRINT=$(node -p "require('./package.json').version")" >> "$GITHUB_ENV"
          else
            echo "SPRINT=unknown" >> "$GITHUB_ENV"
          fi

      - name: Check Differences Between Staging and Main
        run: |
          git fetch origin main staging
          if git diff --quiet origin/main origin/staging; then
            echo "No changes detected between staging and main. Skipping PR creation."
            echo "should_skip_main=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Proceeding with PR creation."
            echo "should_skip_main=false" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.should_skip_main == 'false'
        run: |
          gh pr create --title "🚀 Release ${SPRINT}" \
                       --body  "Release ${SPRINT}" \
                       --assignee "${{ github.actor }}" \
                       --base main --head staging
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  create-PR-staging-to-dev:
    needs: release-on-staging
    if: needs.release-on-staging.outputs.nothing != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read sprint from package.json version
        shell: bash
        run: |
          if [ -f package.json ]; then
            echo "SPRINT=$(node -p "require('./package.json').version")" >> "$GITHUB_ENV"
          else
            echo "SPRINT=unknown" >> "$GITHUB_ENV"
          fi

      - name: Check Differences Between Staging and Dev
        run: |
          git fetch origin dev staging
          if git diff --quiet origin/dev origin/staging; then
            echo "No changes detected between staging and dev. Skipping PR creation."
            echo "should_skip=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Proceeding with PR creation."
            echo "should_skip=false" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.should_skip == 'false'
        run: |
          gh pr create --title "🔀 Staging -> Dev (${SPRINT})" \
                       --body  "Release ${SPRINT}" \
                       --assignee "${{ github.actor }}" \
                       --base dev --head staging
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
