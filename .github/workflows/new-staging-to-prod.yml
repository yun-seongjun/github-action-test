name: Staging -> Main, Dev (RC strip first)

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

env:
  # Manage the app list as needed
  APPS: "neubie-go neubie-order neubie-order-admin"

jobs:
  # 1) Create a release branch from staging, strip -rc.N to stable, commit & tag, then push the branch
  prepare-release-branch:
    name: Prepare release branch (strip RC & tag)
    runs-on: ubuntu-latest
    outputs:
      release_branch: ${{ steps.branch.outputs.name }}
      changed: ${{ steps.strip.outputs.changed }} # "true"/"false"
    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure git
        run: |
          git config user.name  "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Create release branch from staging
        id: branch
        shell: bash
        run: |
          set -euo pipefail
          TS=$(date -u +%Y%m%d%H%M%S)
          BR="release/staging-rcstrip-$TS"
          git switch -c "$BR"
          echo "name=$BR" >> "$GITHUB_OUTPUT"

      - name: Strip -rc.N to stable for target apps
        # Only touch apps that actually have -rc.N; others are left as-is
        id: strip
        shell: bash
        run: |
          set -euo pipefail
          CHANGED=false
          REL_APPS=()
          TAGS=()

          for APP in ${{ env.APPS }}; do
            PKG="apps/$APP/package.json"
            if [ ! -f "$PKG" ]; then
              echo "skip: $PKG not found" >&2
              continue
            fi
            CUR=$(node -p "require('./' + '${PKG}').version")
            STABLE=$(echo "$CUR" | sed 's/-rc\.[0-9]\+$//')
            if [ "$CUR" != "$STABLE" ]; then
              node -e "
                const fs = require('fs');
                const p = '$PKG';
                const pkg = JSON.parse(fs.readFileSync(p, 'utf8'));
                pkg.version = '$STABLE';
                fs.writeFileSync(p, JSON.stringify(pkg, null, 2) + '\n');
              "
              echo "release: $APP $CUR -> $STABLE"
              REL_APPS+=("$APP")
              TAGS+=("$APP@$STABLE")
              CHANGED=true
            fi
          done

          if [ "$CHANGED" = false ]; then
            echo "No RC versions detected. Nothing to change."
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git add apps/*/package.json
          git commit -m "chore(release): strip RC to stable for $(IFS=,; echo "${REL_APPS[*]}")"

          echo "Tagging: ${TAGS[*]}"
          for T in "${TAGS[@]}"; do
            if git rev-parse -q --verify "refs/tags/$T" >/dev/null; then
              echo "tag exists, skip: $T"
            else
              git tag "$T"
            fi
          done

          echo "changed=true" >> "$GITHUB_OUTPUT"

      - name: Push release branch & tags
        # Push even if there were no changes; PR steps will check diffs later
        run: |
          git push origin HEAD
          git push origin --tags
        env:
          GIT_TRACE: 0
          GIT_CURL_VERBOSE: 0

  # 2) Create PR to main using the prepared release branch
  create-PR-to-main:
    name: PR -> main (from release branch)
    runs-on: ubuntu-latest
    needs: prepare-release-branch
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release-branch.outputs.release_branch }}
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check diff (release branch vs main)
        id: diff
        run: |
          set -euo pipefail
          git fetch origin main ${{ needs.prepare-release-branch.outputs.release_branch }}
          if git diff --quiet origin/main origin/${{ needs.prepare-release-branch.outputs.release_branch }}; then
            echo "No changes between release branch and main. Skipping PR."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "Changes found. Will open PR to main."
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build versions line (ALL apps, comma-separated with backticks)
        id: ver
        if: steps.diff.outputs.skip == 'false'
        run: |
          set -euo pipefail
          APP_LIST="${{ env.APPS }}"
          PRETTY=""
          SEP=""
          for APP in $APP_LIST; do
            PKG="apps/$APP/package.json"
            if [ -f "$PKG" ]; then
              V=$(node -p "require('./' + '${PKG}').version")
              PRETTY="${PRETTY}${SEP}\`${APP}@${V}\`"
              SEP=", "
            else
              echo "skip: $PKG not found" >&2
            fi
          done
          echo "pretty=$PRETTY" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request -> main
        if: steps.diff.outputs.skip == 'false'
        run: |
          LINE="Release: ${{ steps.ver.outputs.pretty }}"
          gh pr create \
            --repo "${{ github.repository }}" \
            --title "$LINE" \
            --body  "$LINE" \
            --base main \
            --head "${{ needs.prepare-release-branch.outputs.release_branch }}"
        env:
          GH_TOKEN: ${{ github.token }}

  # 3) Create PR to dev using the prepared release branch
  create-PR-to-dev:
    name: PR -> dev (from release branch)
    runs-on: ubuntu-latest
    needs: prepare-release-branch
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release-branch.outputs.release_branch }}
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check diff (release branch vs dev)
        id: diff
        run: |
          set -euo pipefail
          git fetch origin dev ${{ needs.prepare-release-branch.outputs.release_branch }}
          if git diff --quiet origin/dev origin/${{ needs.prepare-release-branch.outputs.release_branch }}; then
            echo "No changes between release branch and dev. Skipping PR."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "Changes found. Will open PR to dev."
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build versions line (ALL apps, comma-separated with backticks)
        id: ver
        if: steps.diff.outputs.skip == 'false'
        run: |
          set -euo pipefail
          APP_LIST="${{ env.APPS }}"
          PRETTY=""
          SEP=""
          for APP in $APP_LIST; do
            PKG="apps/$APP/package.json"
            if [ -f "$PKG" ]; then
              V=$(node -p "require('./' + '${PKG}').version")
              PRETTY="${PRETTY}${SEP}\`${APP}@${V}\`"
              SEP=", "
            else
              echo "skip: $PKG not found" >&2
            fi
          done
          echo "pretty=$PRETTY" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request -> dev
        if: steps.diff.outputs.skip == 'false'
        run: |
          LINE="Staging -> Dev: ${{ steps.ver.outputs.pretty }}"
          gh pr create \
            --repo "${{ github.repository }}" \
            --title "$LINE" \
            --body  "$LINE" \
            --base dev \
            --head "${{ needs.prepare-release-branch.outputs.release_branch }}"
        env:
          GH_TOKEN: ${{ github.token }}
