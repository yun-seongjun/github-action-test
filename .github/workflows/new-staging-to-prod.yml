name: Staging -> Main, Dev

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

env:
  APPS: "neubie-go neubie-order neubie-order-admin"

jobs:
  staging-to-main-and-dev:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Prepare head branch (strip RC if needed)
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          HEAD_REF="staging"
          CHANGED=false

          for APP in ${{ env.APPS }}; do
            PKG="apps/$APP/package.json"
            [ -f "$PKG" ] || { echo "skip: $PKG not found" >&2; continue; }
            CUR=$(node -p "require('./' + '${PKG}').version")
            STABLE=$(echo "$CUR" | sed 's/-rc\.[0-9]\+$//')
            if [ "$CUR" != "$STABLE" ]; then
              node -e "
                const fs = require('fs'); const p = '$PKG';
                const pkg = JSON.parse(fs.readFileSync(p, 'utf8'));
                pkg.version = '$STABLE';
                fs.writeFileSync(p, JSON.stringify(pkg, null, 2) + '\n');
              "
              echo "strip: $APP $CUR -> $STABLE"
              CHANGED=true
            fi
          done

          if [ -n "$(git status --porcelain apps/*/package.json 2>/dev/null)" ]; then
            git switch -c release/rc-to-stable || git switch release/rc-to-stable
            git config user.name  "GitHub Actions"
            git config user.email "github-actions@github.com"
            git add apps/*/package.json
            git commit -m "release: RC to stable"
            git push --force-with-lease origin HEAD:release/rc-to-stable
            HEAD_REF="release/rc-to-stable"
            CHANGED=true
          fi

          echo "head=$HEAD_REF"        >> "$GITHUB_OUTPUT"
          echo "rc_stripped=$CHANGED"  >> "$GITHUB_OUTPUT"

      - name: Build versions line (ALL apps)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          command -v jq >/dev/null 2>&1 && HAVE_JQ=1 || HAVE_JQ=0
          PRETTY=""
          SEP=""
          for APP in ${{ env.APPS }}; do
            PKG="apps/$APP/package.json"
            [ -f "$PKG" ] || continue
            V=""
            if [ "$HAVE_JQ" = "1" ]; then
              V=$(jq -r '.version // empty' "$PKG" 2>/dev/null || true)
            fi
            if [ -z "$V" ]; then
              V=$(node -p "try{require('./$PKG').version||''}catch(e){''}")
            fi
            [ -n "$V" ] || continue
            PRETTY="${PRETTY}${SEP}\`${APP}@${V}\`"
            SEP=", "
          done
          [ -n "$PRETTY" ] || PRETTY="(no app versions found)"
          echo "pretty=$PRETTY" >> "$GITHUB_OUTPUT"

      - name: Open/ensure PR to main
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          HEAD="${{ steps.prep.outputs.head }}"
          git fetch origin main "$HEAD"
          if git diff --quiet origin/main origin/"$HEAD"; then
            echo "No diff between $HEAD and main; skipping PR."
            exit 0
          fi
          if gh pr list --base main --head "$HEAD" --json number -q '.[0].number' | grep -q '^[0-9]\+$'; then
            echo "PR already exists for head=$HEAD -> main; skipping create."
            exit 0
          fi

          printf -v LINE 'Release: %s' '${{ steps.ver.outputs.pretty }}'
          gh pr create \
            --repo "${{ github.repository }}" \
            --base main \
            --head "$HEAD" \
            --title "$LINE" \
            --body  "$LINE"

      - name: Open/ensure PR to dev
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          HEAD="${{ steps.prep.outputs.head }}"
          git fetch origin dev "$HEAD"
          if git diff --quiet origin/dev origin/"$HEAD"; then
            echo "No diff between $HEAD and dev; skipping PR."
            exit 0
          fi
          if gh pr list --base dev --head "$HEAD" --json number -q '.[0].number' | grep -q '^[0-9]\+$'; then
            echo "PR already exists for head=$HEAD -> dev; skipping create."
            exit 0
          fi

          printf -v LINE 'Staging -> Dev: %s' '${{ steps.ver.outputs.pretty }}'
          gh pr create \
            --repo "${{ github.repository }}" \
            --base dev \
            --head "$HEAD" \
            --title "$LINE" \
            --body  "$LINE"
