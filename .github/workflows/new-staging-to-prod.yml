name: Staging -> Main, Dev

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

env:
  APPS: "neubie-go neubie-order neubie-order-admin"

jobs:
  rc-strip-and-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout staging
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0

      - name: Setup Node (read/write package.json)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Strip -rc.N to stable (edit only, no commit)
        id: strip
        shell: bash
        run: |
          set -euo pipefail
          CHANGED=false
          for APP in ${{ env.APPS }}; do
            PKG="apps/$APP/package.json"
            [ -f "$PKG" ] || { echo "skip: $PKG not found" >&2; continue; }
            CUR=$(node -p "require('./' + '${PKG}').version")
            STABLE=$(echo "$CUR" | sed 's/-rc\.[0-9]\+$//')
            if [ "$CUR" != "$STABLE" ]; then
              node -e "
                const fs = require('fs'); const p = '$PKG';
                const pkg = JSON.parse(fs.readFileSync(p, 'utf8'));
                pkg.version = '$STABLE';
                fs.writeFileSync(p, JSON.stringify(pkg, null, 2) + '\n');
              "
              echo "release: $APP $CUR -> $STABLE"
              CHANGED=true
            else
              echo "already stable: $APP@$CUR"
            fi
          done

          if [ -z "$(git status --porcelain apps/*/package.json 2>/dev/null)" ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Build versions line (ALL apps, robust)
        id: ver
        if: steps.strip.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          # Prefer jq to read JSON; fall back to node if jq is missing/empty
          have_jq=true
          command -v jq >/dev/null 2>&1 || have_jq=false

          build_list () {
            local list=""
            local sep=""
            for APP in ${{ env.APPS }}; do
              local PKG="apps/$APP/package.json"
              [ -f "$PKG" ] || continue
              local V=""
              if $have_jq; then
                V=$(jq -r '.version // empty' "$PKG" 2>/dev/null || true)
              fi
              if [ -z "$V" ]; then
                V=$(node -p "try{require('./$PKG').version||''}catch(e){''}")
              fi
              [ -n "$V" ] || continue
              list="${list}${sep}\`${APP}@${V}\`"
              sep=", "
            done
            printf "%s" "$list"
          }

          PRETTY=$(build_list)

          # Fallback: discover apps/*/package.json if list is still empty
          if [ -z "$PRETTY" ]; then
            SEP=""
            for PKG in apps/*/package.json; do
              [ -f "$PKG" ] || continue
              APP=$(basename "$(dirname "$PKG")")
              V=""
              if $have_jq; then
                V=$(jq -r '.version // empty' "$PKG" 2>/dev/null || true)
              fi
              if [ -z "$V" ]; then
                V=$(node -p "try{require('./$PKG').version||''}catch(e){''}")
              fi
              [ -n "$V" ] || continue
              PRETTY="${PRETTY}${SEP}\`${APP}@${V}\`"
              SEP=", "
            done
          fi

          # Last resort guard to avoid empty titles/bodies
          if [ -z "$PRETTY" ]; then
            PRETTY="(no app versions found)"
          fi

          echo "pretty=$PRETTY" >> "$GITHUB_OUTPUT"

      # === PR to main (fixed branch name) ===
      - name: Create PR -> main
        if: steps.strip.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          base: main
          branch: release/rc-to-stable-main
          title: "Release: ${{ steps.ver.outputs.pretty }}"
          body:  "Release: ${{ steps.ver.outputs.pretty }}"
          commit-message: "release: RC to stable"
          delete-branch: true

      # === PR to dev (fixed branch name) ===
      - name: Create PR -> dev
        if: steps.strip.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ github.token }}
          base: dev
          branch: release/rc-to-stable-dev
          title: "Staging -> Dev: ${{ steps.ver.outputs.pretty }}"
          body:  "Staging -> Dev: ${{ steps.ver.outputs.pretty }}"
          commit-message: "release: RC to stable"
          delete-branch: true

      - name: No-op
        if: steps.strip.outputs.changed != 'true'
        run: echo "Nothing to strip. No PRs opened."
